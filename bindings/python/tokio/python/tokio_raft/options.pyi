from datetime import timedelta
from os import PathLike
from .types import Header
from typing import Optional

class Options:
  @property
  def heartbeat_timeout(self) -> timedelta:...
  
  @heartbeat_timeout.setter
  def heartbeat_timeout(self, value: timedelta) -> None:...

  @property
  def election_timeout(self) -> timedelta:...
  
  @election_timeout.setter
  def election_timeout(self, value: timedelta) -> None:...

  @property
  def commit_timeout(self) -> timedelta:...
  
  @commit_timeout.setter
  def commit_timeout(self, value: timedelta) -> None:...
  
  @property
  def max_append_entries(self) -> int:...
  
  @max_append_entries.setter
  def max_append_entries(self, value: int) -> None:...
  
  @property
  def batch_apply(self) -> bool:...
  
  @batch_apply.setter
  def batch_apply(self, value: bool) -> None:...
  
  @property
  def shutdown_on_remove(self) -> bool:...
  
  @shutdown_on_remove.setter
  def shutdown_on_remove(self, value: bool) -> None:...
  
  @property
  def trailing_logs(self) -> int:...
  
  @trailing_logs.setter
  def trailing_logs(self, value: int) -> None:...
  
  @property
  def snapshot_interval(self) -> timedelta:...
  
  @snapshot_interval.setter
  def snapshot_interval(self, value: timedelta) -> None:...
  
  @property
  def snapshot_threshold(self) -> int:...
  
  @snapshot_threshold.setter
  def snapshot_threshold(self, value: int) -> None:...
  
  @property
  def leader_lease_timeout(self) -> timedelta:...
  
  @leader_lease_timeout.setter
  def leader_lease_timeout(self, value: timedelta) -> None:...
  
  @property
  def no_snapshot_restore_on_start(self) -> bool:...
  
  @no_snapshot_restore_on_start.setter
  def no_snapshot_restore_on_start(self, value: bool) -> None:...

  def __eq__(self, __value: Options) -> bool: ...
  
  def __ne__(self, __value: Options) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class ReloadableOptions:
  @property
  def heartbeat_timeout(self) -> timedelta:...

  @heartbeat_timeout.setter
  def heartbeat_timeout(self, value: timedelta) -> None:...

  @property
  def election_timeout(self) -> timedelta:...

  @election_timeout.setter
  def election_timeout(self, value: timedelta) -> None:...

  @property
  def trailing_logs(self) -> int:...

  @trailing_logs.setter
  def trailing_logs(self, value: int) -> None:...

  @property
  def snapshot_interval(self) -> timedelta:...

  @snapshot_interval.setter
  def snapshot_interval(self, value: timedelta) -> None:...

  @property
  def snapshot_threshold(self) -> int:...

  @snapshot_threshold.setter
  def snapshot_threshold(self, value: int) -> None:...

  def __eq__(self, __value: ReloadableOptions) -> bool: ...
  
  def __ne__(self, __value: ReloadableOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class SnapshotVersion:
  def v1() -> SnapshotVersion:...

class ProtocolVersion:
  def new() -> ProtocolVersion:...

  def v1() -> ProtocolVersion:...

  def __eq__(self, __value: ProtocolVersion) -> bool: ...
  
  def __ne__(self, __value: ProtocolVersion) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class SnapshotStorageOptions:
  def file(opts: FileSnapshotStorageOptions) -> SnapshotStorageOptions:...
  
  def memory() -> SnapshotStorageOptions:...

  def __eq__(self, __value: SnapshotStorageOptions) -> bool: ...
  
  def __ne__(self, __value: SnapshotStorageOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class FileSnapshotStorageOptions:
  def __init__(self, base: PathLike, retain: int) -> None: ...

  @property
  def base(self) -> str:...

  @property
  def retain(self) -> int:...

  def __eq__(self, __value: FileSnapshotStorageOptions) -> bool: ...
  
  def __ne__(self, __value: FileSnapshotStorageOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class SledMode:
  @staticmethod
  def low_space() -> SledMode:...
  
  @staticmethod
  def high_throughput() -> SledMode:...

  def __eq__(self, __value: SledMode) -> bool: ...
  
  def __ne__(self, __value: SledMode) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class SledOptions:
  def __init__(self) -> None: ...

  @property
  def path(self) -> str:...
  
  @path.setter
  def path(self, value: str) -> None:...
  
  @property
  def cache_capacity(self) -> int:...
  
  @cache_capacity.setter
  def cache_capacity(self, value: int) -> None:...
  
  @property
  def mode(self) -> SledMode:...
  
  @mode.setter
  def mode(self, value: SledMode) -> None:...
  
  @property
  def use_compression(self) -> bool:...
  
  @use_compression.setter
  def use_compression(self, value: bool) -> None:...
  
  @property
  def compression_factor(self) -> int:...
  
  @compression_factor.setter
  def compression_factor(self, value: int) -> None:...
  
  @property
  def temporary(self) -> bool:...
  
  @temporary.setter
  def temporary(self, value: bool) -> None:...
  
  @property
  def create_new(self) -> bool:...
  
  @create_new.setter
  def create_new(self, value: bool) -> None:...
  
  @property
  def print_profile_on_drop(self) -> bool:...
  
  @print_profile_on_drop.setter
  def print_profile_on_drop(self, value: bool) -> None:...

  def __eq__(self, __value: SledOptions) -> bool: ...
  
  def __ne__(self, __value: SledOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class RedbOptions:
  @property
  def cache_size(self) -> int:...
  
  @cache_size.setter
  def cache_size(self, value: int) -> None:...
  
  @property
  def path(self) -> PathLike:...
  
  @path.setter
  def path(self, value: str) -> None:...

  def __eq__(self, __value: RedbOptions) -> bool: ...
  
  def __ne__(self, __value: RedbOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class JammdbOptions:
  @property
  def path(self) -> PathLike:...
  
  @path.setter
  def path(self, value: str) -> None:...
  
  @property
  def direct_writes(self) -> bool:...
  
  @direct_writes.setter
  def direct_writes(self, value: bool) -> None:...
  
  @property
  def strict_mode(self) -> bool:...
  
  @strict_mode.setter
  def strict_mode(self, value: bool) -> None:...
  
  @property
  def mmap_populate(self) -> bool:...
  
  @mmap_populate.setter
  def mmap_populate(self, value: bool) -> None:...
  
  @property
  def pagesize(self) -> int:...
  
  @pagesize.setter
  def pagesize(self, value: int) -> None:...
  
  @property
  def num_pages(self) -> int:...
  
  @num_pages.setter
  def num_pages(self, value: int) -> None:...

  def __eq__(self, __value: JammdbOptions) -> bool: ...
  
  def __ne__(self, __value: JammdbOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class LighWALOptions:
  @staticmethod
  def sled(opts: SledOptions) -> LighWALOptions:...
  
  @staticmethod
  def redb(opts: RedbOptions) -> LighWALOptions:...
  
  @staticmethod
  def jammdb(opts: JammdbOptions) -> LighWALOptions:...
  
  def __eq__(self, __value: LighWALOptions) -> bool: ...
  
  def __ne__(self, __value: LighWALOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class StorageOptions:
  @staticmethod
  def light(snapshot: SnapshotStorageOptions, wal: LighWALOptions) -> StorageOptions:...

  @staticmethod
  def memory() -> StorageOptions:...

  def __eq__(self, __value: StorageOptions) -> bool: ...
  
  def __ne__(self, __value: StorageOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class TcpTransportOptions:
  def __init__(self, header: Header, bind_addr: str) -> None: ...

  @property
  def header(self) -> Header:...
  
  @header.setter
  def header(self, value: Header) -> None:...
  
  @property
  def bind_addr(self) -> str:...
  
  @bind_addr.setter
  def bind_addr(self, value: str) -> None:...
  
  @property
  def resolv_conf(self) -> PathLike:...
  
  @resolv_conf.setter
  def resolv_conf(self, value: PathLike) -> None:...

  @property
  def max_pool(self) -> int:...
  
  @max_pool.setter
  def max_pool(self, value: int) -> None:...
  
  @property
  def max_inflight_requests(self) -> int:...
  
  @max_inflight_requests.setter
  def max_inflight_requests(self, value: int) -> None:...
  
  @property
  def timeout(self) -> timedelta:...
  
  @timeout.setter
  def timeout(self, value: timedelta) -> None:...

  def __eq__(self, __value: TcpTransportOptions) -> bool: ...
  
  def __ne__(self, __value: TcpTransportOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class PrivateKey:
  @staticmethod
  def pkcs8(k: str) -> PrivateKey:...
  
  @staticmethod
  def pkcs1(k: str) -> PrivateKey:...
  
  @staticmethod
  def sec1(k: str) -> PrivateKey:...
  
  def __eq__(self, __value: PrivateKey) -> bool: ...
  
  def __ne__(self, __value: PrivateKey) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...


class CertChain:
  def __init__(self, cert: bytes) -> None: ...
  
  def push(self, cert: bytes) -> None: ...
  
  def remove(self, cert: bytes) -> None: ...
  
  def clear(self) -> None: ...
  
  def __len__(self) -> int: ...
  
  def __getitem__(self, __key: int) -> bytes: ...
  
  def __setitem__(self, __key: int, __value: bytes) -> None: ...
  
  def __delitem__(self, __key: int) -> None: ...
  
  def __contiains__(self, __key: bytes) -> bool: ...
  
  def __eq__(self, __value: CertChain) -> bool: ...
  
  def __ne__(self, __value: CertChain) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class CertChainAndPrivateKey:
  @staticmethod
  def pkcs8(cert_chain: CertChain, private_key: bytes) -> CertChainAndPrivateKey:...
  
  @staticmethod
  def pkcs1(cert_chain: CertChain, private_key: bytes) -> CertChainAndPrivateKey:...
  
  @staticmethod
  def sec1(cert_chain: CertChain, private_key: bytes) -> CertChainAndPrivateKey:...

  @property
  def cert_chain(self) -> CertChain:...
  
  @cert_chain.setter
  def cert_chain(self, value: CertChain) -> None:...
  
  @property
  def private_key(self) -> PrivateKey:...
  
  @private_key.setter
  def private_key(self, value: PrivateKey) -> None:...

  def __eq__(self, __value: CertChainAndPrivateKey) -> bool: ...
  
  def __ne__(self, __value: CertChainAndPrivateKey) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str: ...

class TlsServerConfig:
  def __init__(self, cert_chain: CertChain, pk: PrivateKey) -> None: ...
  
  @property
  def cert_chain_and_private_key(self) -> CertChainAndPrivateKey:...
  
  @cert_chain_and_private_key.setter
  def cert_chain_and_private_key(self, value: CertChainAndPrivateKey) -> None:...
  
  @property
  def ocsp(self) -> bytes:...
  
  @ocsp.setter
  def ocsp(self, value: bytes) -> None:...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str:...

class TlsClientConfig:
  def __init__(self) -> None: ...
  
  @property
  def cert_chain_and_private_key(self) -> CertChainAndPrivateKey:...
  
  @cert_chain_and_private_key.setter
  def cert_chain_and_private_key(self, value: CertChainAndPrivateKey) -> None:...
  
  @property
  def root_certs(self) -> Optional[CertChain]:...
  
  @root_certs.setter
  def root_certs(self, value: Optional[CertChain]) -> None:...
  
  def __str__(self) -> str: ...
  
  def __repr__(self) -> str:...

class TlsTransportOptions:
  def __init__(self, domain: str, transport_opts: TcpTransportOptions, server_config: TlsServerConfig, client_config: TlsClientConfig) -> None: ...

  @property
  def domain(self) -> str:...
  
  @domain.setter
  def domain(self, value: str) -> None:...
  
  @property
  def header(self) -> Header:...
  
  @header.setter
  def header(self, value: Header) -> None:...
  
  @property
  def bind_addr(self) -> str:...
  
  @bind_addr.setter
  def bind_addr(self, value: str) -> None:...
  
  @property
  def resolv_conf(self) -> PathLike:...
  
  @resolv_conf.setter
  def resolv_conf(self, value: PathLike) -> None:...

  @property
  def max_pool(self) -> int:...
  
  @max_pool.setter
  def max_pool(self, value: int) -> None:...
  
  @property
  def max_inflight_requests(self) -> int:...
  
  @max_inflight_requests.setter
  def max_inflight_requests(self, value: int) -> None:...
  
  @property
  def timeout(self) -> timedelta:...
  
  @timeout.setter
  def timeout(self, value: timedelta) -> None:...

  @property
  def tls_server_config(self) -> TlsServerConfig:...
  
  @tls_server_config.setter
  def tls_server_config(self, value: TlsServerConfig) -> None:...
  
  @property
  def tls_client_config(self) -> TlsClientConfig:...
  
  @tls_client_config.setter
  def tls_client_config(self, value: TlsClientConfig) -> None:...
  
  def __str__(self) -> str:...
  
  def __repr__(self) -> str:...

class Identity:
  @staticmethod
  def pkcs12(pfx: bytes, password: str) -> Identity:...
  
  @staticmethod
  def pkcs8(cert: bytes, private_key: bytes) -> Identity:...

  def __eq__(self, __value: Identity) -> bool: ...
  
  def __ne__(self, __value: Identity) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str:...
  
  def __repr__(self) -> str:...

class NativeTlsTransportOptions:
  def __init__(self, domain: str, identity: Identity, opts: TcpTransportOptions) -> None: ...
  
  @property
  def domain(self) -> str:...
  
  @domain.setter
  def domain(self, value: str) -> None:...
  
  @property
  def identity(self) -> Identity:...
  
  @identity.setter
  def identity(self, value: Identity) -> None:...
  
  @property
  def header(self) -> Header:...
  
  @header.setter
  def header(self, value: Header) -> None:...
  
  @property
  def bind_addr(self) -> str:...
  
  @bind_addr.setter
  def bind_addr(self, value: str) -> None:...
  
  @property
  def resolv_conf(self) -> PathLike:...
  
  @resolv_conf.setter
  def resolv_conf(self, value: PathLike) -> None:...

  @property
  def max_pool(self) -> int:...
  
  @max_pool.setter
  def max_pool(self, value: int) -> None:...
  
  @property
  def max_inflight_requests(self) -> int:...
  
  @max_inflight_requests.setter
  def max_inflight_requests(self, value: int) -> None:...
  
  @property
  def timeout(self) -> timedelta:...
  
  @timeout.setter
  def timeout(self, value: timedelta) -> None:...
  
  def __eq__(self, __value: NativeTlsTransportOptions) -> bool: ...
  
  def __ne__(self, __value: NativeTlsTransportOptions) -> bool: ...
  
  def __hash__(self) -> int: ...
  
  def __str__(self) -> str:...
  
  def __repr__(self) -> str:...


class TransportOptions:
  @staticmethod
  def tcp(opts: TcpTransportOptions) -> TransportOptions:...
  
  @staticmethod
  def tls(opts: TlsTransportOptions) -> TransportOptions:...
  
  @staticmethod
  def native_tls(opts: NativeTlsTransportOptions) -> TransportOptions:...