

from typing import Union, Optional
from datetime import timedelta
from .membership import Membership
from .options import ProtocolVersion, SnapshotVersion

  

class NodeId:
  def __init__(self, src: str) -> None: ...

  def to_bytes(self) -> bytes: ...
  
  def from_bytes(src: bytes) -> NodeId: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __hash__(self) -> int: ...

  def __richcmp__(self, other: NodeId, op) -> bool: ...



class NodeAddress:

  def __init__(self, src: str) -> None: ...

  def to_bytes(self) -> bytes: ...

  def from_bytes(src: bytes) -> NodeAddress: ...

  @property
  def port(self) -> int: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __hash__(self) -> int: ...

  def __richcmp__(self, other: NodeAddress, op) -> bool: ...



class Node:
  def __init__(self, id: NodeId, address: Node) -> None: ...

  @property
  def id(self) -> NodeId: ...
  
  @id.setter
  def id(self, value: NodeId) -> None : ...
  
  @property
  def address(self) -> NodeAddress: ...
  
  @address.setter
  def address(self, value: NodeAddress) -> None : ... 

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __hash__(self) -> int: ...

  def __richcmp__(self, other: Node, op) -> bool: ...



class Header:
  def __init__(self, protocol_version: ProtocolVersion, id: NodeId, addr: NodeAddress) -> None: ...

  @property
  def id(self) -> NodeId: ...
  
  @id.setter
  def id(self, value: NodeId) -> None : ...
  
  @property
  def address(self) -> NodeAddress: ...
  
  @address.setter
  def address(self, value: NodeAddress) -> None : ...
  
  @property
  def protocol_version(self) -> ProtocolVersion: ...
  
  @protocol_version.setter
  def protocol_version(self, value: ProtocolVersion) -> None : ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __hash__(self) -> int: ...

  def __eq__(self, other: Header) -> bool: ...

  def __ne__(self, other: Header) -> bool: ...



class CommittedLog:
  @property
  def index(self) -> int: ...

  @property
  def term(self) -> int: ...

  def data(self) -> Union[bytes, Membership]: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ... 

  def __richcmp__(self, other: CommittedLog, op) -> bool: ...



class RaftStats:
  @property
  def role(self) -> Role: ...
  
  @property
  def term(self) -> int: ...
  
  @property
  def last_log_index(self) -> int: ...
  
  @property
  def last_log_term(self) -> int: ...
  
  @property
  def commit_index(self) -> int: ...
  
  @property
  def applied_index(self) -> int: ...
  
  @property
  def fsm_pending(self) -> int: ...
  
  @property
  def last_snapshot_index(self) -> int: ...
  
  @property
  def last_snapshot_term(self) -> int: ...
  
  @property
  def protocol_version(self) -> ProtocolVersion: ...
  
  @property
  def snapshot_version(self) -> SnapshotVersion: ...
  
  @property
  def last_contact(self) -> Optional[timedelta]: ...

  def membership(self) -> Membership: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __eq__(self, other: RaftStats) -> bool: ...

  def __ne__(self, other: RaftStats) -> bool: ...



class Role:
  def __init__(self) -> None: ...

  def follower() -> Role: ...
  
  def candidate() -> Role: ...
  
  def leader() -> Role: ...
  
  def is_leader(self) -> bool: ...
  
  def is_follower(self) -> bool: ...
  
  def is_candidate(self) -> bool: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __eq__(self, other: Role) -> bool: ...

  def __ne__(self, other: Role) -> bool: ...

  def __hash__(self) -> int: ...

  def __int__(self) -> int: ...

