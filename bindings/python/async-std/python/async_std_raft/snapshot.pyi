

from typing import Protocol
from .membership import Membership

class AsyncRead(Protocol):
  async def read(self, chunk_size: int = 1024) -> memoryview:...

  async def read_exact(self, bytes: int) -> memoryview:...

  async def read_to_end(self, chunk_size: int = 1024) -> memoryview:...
  
  async def read_to_string(self, chunk_size: int = 1024) -> str:...

  def __aenter__(self) -> AsyncRead: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

class AsyncWrite(Protocol):
  async def write(self, data: bytes) -> None:...

  async def write_all(self, data: bytes) -> None:...

  async def flush(self) -> None:...

  async def close(self) -> None:...

  def __aenter__(self) -> AsyncWrite: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...




class SnapshotId:
  @property
  def index(self) -> int: ...

  @property
  def term(self) -> int: ...

  @property
  def timestamp(self) -> int: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ...

  def __hash__(self) -> int: ...

  def __richcmp__(self, other: SnapshotId, op) -> bool: ...



class SnapshotMeta:
  @property
  def index(self) -> int: ...
 
  @property
  def term(self) -> int: ...
  
  @property
  def timestamp(self) -> int: ...
  
  @property
  def size(self) -> int: ...
  
  @property
  def membership_index(self) -> int: ...

  def membership(self) -> Membership: ...
  
  @property
  def size(self) -> int: ...

  def __str__(self) -> str: ...

  def __repr__(self) -> str: ... 

  def __richcmp__(self, other: SnapshotId, op) -> bool: ...



class AsyncReader(AsyncRead):
  def memory(self, src: bytes) -> AsyncReader: ...

  def file(self, path: str) -> AsyncReader: ...

  def __aenter__(self) -> AsyncReader: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

      

class Snapshot(AsyncRead):
  def __aenter__(self) -> Snapshot: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

      
    
class SnapshotSource:
  async def open(self) -> Snapshot: ...

          

class SnapshotSink(AsyncWrite):
  def id(self) -> SnapshotId: ...

  async def cancel(self) -> None: ...

  def __aenter__(self) -> SnapshotSink: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

      