

from typing import AsyncIterable, Optional
from datetime import timedelta
from .types import *
from .fsm import *
from .membership import *
from .options import *

                    

class ApplyFuture:
  async def wait(self) -> FinateStateMachineResponse: ...



class BarrierFuture:
  async def wait(self) -> FinateStateMachineResponse: ...



class MembershipChangeFuture:
  async def wait(self) -> FinateStateMachineResponse: ...



class VerifyFuture:
  async def wait(self) -> None: ...



class LeadershipTransferFuture:
  async def wait(self) -> None: ...



class SnapshotFuture:
  async def wait(self) -> SnapshotSource: ...


    
class SnapshotSource:
  async def open(self) -> Snapshot: ...

          

class AsyncReader(AsyncRead):
  def memory(self, src: bytes) -> AsyncReader: ...

  def file(self, path: str) -> AsyncReader: ...

  def __aenter__(self) -> AsyncReader: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

      

class SnapshotSink(AsyncWrite):
  def id(self) -> SnapshotId: ...

  async def cancel(self) -> None: ...

  def __aenter__(self) -> SnapshotSink: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

      

class Snapshot(AsyncRead):
  def __aenter__(self) -> Snapshot: ...

  def __aexit__(self, exc_type, exc_value, traceback) -> None: ...

      

class Raft:
  async def new(fsm: fsm.FinateStateMachine, options: Options) -> Raft: ...

  async def recover(fsm: fsm.FinateStateMachine, membership: Membership, options: Options) -> None:...

  def reloadable_options(self) -> ReloadableOptions: ...
  
  def options(self) -> Options: ...
  
  def local_id(self) -> NodeId: ...
  
  def local_addr(self) -> NodeAddress: ...
  
  def role(self) -> Role: ...
  
  def current_term(self) -> int: ...
  
  def latest_membership(self) -> LatestMembership: ...
  
  def last_contact(self) -> Optional[timedelta]: ...
  
  def last_index(self) -> int: ...
  
  def commit_index(self) -> int: ...
  
  def applied_index(self) -> int: ...
  
  def leader(self) -> Node: ...

  async def leadership_watcher(self) -> AsyncIterable[bool] : ...
  
  async def leadership_change_watcher(self) -> AsyncIterable[bool] : ...
  
  async def apply(self, data: bytes) -> ApplyFuture : ...

  async def apply_timeout(self, timeout: timedelta) -> ApplyFuture : ...

  async def barrier(self) -> BarrierFuture: ...
  
  async def barrier_timeout(self, timeout: timedelta) -> BarrierFuture: ...

  async def snapshot(self) -> SnapshotFuture: ...

  async def snapshot_timeout(self, timeout: timedelta) -> SnapshotFuture: ...

  async def verify_leader(self) -> VerifyFuture: ...
  
  async def add_voter(self, id: NodeId, addr: NodeAddress, prev_index: int) -> MembershipChangeFuture:...
  
  async def add_voter_timeout(self, id: NodeId, addr: NodeAddress, prev_index: int, timeout: timedelta) -> MembershipChangeFuture:...
  
  async def add_nonvoter(self, id: NodeId, addr: NodeAddress, prev_index: int) -> MembershipChangeFuture:...

  async def add_nonvoter_timeout(self, id: NodeId, addr: NodeAddress, prev_index: int, timeout: timedelta) -> MembershipChangeFuture:...

  async def demote_voter(self, id: NodeId, prev_index: int) -> MembershipChangeFuture:...

  async def demote_voter_timeout(self, id: NodeId, prev_index: int, timeout: timedelta) -> MembershipChangeFuture:...
  
  async def remove(self, id: NodeId, prev_index: int) -> MembershipChangeFuture:...

  async def remove_timeout(self, id: NodeId, prev_index: int, timeout: timedelta) -> MembershipChangeFuture:...
  
  async def reload_options(self, options: ReloadableOptions) -> None :...
  
  async def restore(self, meta: SnapshotMeta, reader: AsyncReader) -> None :...

  async def restore_timeout(self, meta: SnapshotMeta, reader: AsyncReader, timeout: timedelta) -> None :...

  async def leadership_transfer(self) -> LeadershipTransferFuture:...
  
  async def leadership_transfer_to_node(self, id: NodeId, addr: NodeAddress) -> LeadershipTransferFuture:...

  async def stats(self) -> RaftStats:...

  async def shutdown(self) -> bool :...

